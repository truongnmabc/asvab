name: CI/CD

on:
  push:
    branches: ["dev"]
  pull_request:
    branches: ["dev"]

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    strategy:
      matrix:
        node-version: [22.x]

    steps:
      # ✅ 1️⃣ Checkout source code
      - name: Checkout repository
        uses: actions/checkout@v4

      # ✅ 2️⃣ Setup Node.js và cache dependencies
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"

      # ✅ 3️⃣ Cài đặt dependencies
      - name: Install dependencies
        run: yarn install --frozen-lockfile



  
      # ✅ 6️⃣ Build dự án
      - name: Build the project
        run: yarn build


      # ✅ 8️⃣ Định nghĩa image name
      - name: Set Docker Image Name
        run: |
          echo "IMAGE_URL=ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.sha }}" >> $GITHUB_ENV
          echo "IMAGE_URL_LATEST=ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest" >> $GITHUB_ENV

      # ✅ 9️⃣ Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ✅ 🔟 Đăng nhập vào Docker Hub & GitHub Container Registry
      - name: Login to Docker Hub
        if: success()
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GitHub Container Registry (GHCR)
        if: success()
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}

      # ✅ 1️⃣1️⃣ Build và push Docker image (sử dụng multi-stage build để tối ưu dung lượng)
      - name: Build and push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_URL }},${{ env.IMAGE_URL_LATEST }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
              ENV_CONTENT=${{ secrets.ENV_CONTENT }}


      # ✅ 1️⃣3️⃣ Deploy lên CapRover
      - name: Deploy Image to CapRover
        uses: caprover/deploy-from-github@v1.1.2
        with:
          server: "${{ secrets.CAPROVER_SERVER }}"
          app: "${{ secrets.APP_NAME }}"
          token: "${{ secrets.CAPROVER_API_TOKEN }}"
          image: ${{ env.IMAGE_URL }}
=======
    build_and_deploy:
        runs-on: ubuntu-latest
        permissions:
          contents: read
          issues: write
        strategy:
            matrix:
                node-version: [22.x]

        steps:
            - name: Checkout source code
              uses: actions/checkout@v4
              
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: "yarn"
            - name: Create .env file
              run: |
                echo "AUTH_SECRET=${{ secrets.AUTH_SECRET }}" >> .env
                echo "DEV_BASE_API=${{ secrets.DEV_BASE_API }}" >> .env
                echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> .env
                echo "NEXT_PUBLIC_APP_SHORT_NAME=${{ secrets.NEXT_PUBLIC_APP_SHORT_NAME }}" >> .env
                echo "NEXT_PUBLIC_GOOGLE_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_ID }}" >> .env
                echo "NEXT_PUBLIC_GOOGLE_SECRET=${{ secrets.NEXT_PUBLIC_GOOGLE_SECRET }}" >> .env


            - name: Install dependencies
              run: |
                  npm install -g yarn
                  yarn install --frozen-lockfile

            - name: Build the project
              run: yarn build

            - name: Debug .next directory
              run: ls -la .next || echo ".next does not exist"

            - name: Copy build artifacts
              run: |
                  mkdir -p build_output
                  cp -r .next public build_output/

            - name: Upload build artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: build_artifacts
                  path: build_output


            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_PASSWORD }}

            - name: Login to GitHub Container Registry (GHCR)
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.repository_owner }}
                  password: ${{ secrets.GH_TOKEN }}

            - name: Preset Image Name
              run: echo "IMAGE_URL=$(echo ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:$(echo ${{ github.sha }} | cut -c1-7) | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

            - name: Download build artifacts
              uses: actions/download-artifact@v3
              with:
                  name: build_artifacts
                  path: build_output

            - name: Build and push Docker Image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./Dockerfile
                  push: true
                  tags: ${{ env.IMAGE_URL }}
                  build-args: |
                    ENV_CONTENT=${{ secrets.ENV_CONTENT }}

            - name: Deploy Image to CapRover
              uses: caprover/deploy-from-github@v1.1.2
              with:
                  server: "${{ secrets.CAPROVER_SERVER }}"
                  app: "${{ secrets.APP_NAME }}"
                  token: "${{ secrets.CAPROVER_API_TOKEN }}"
                  image: ${{ env.IMAGE_URL }}
