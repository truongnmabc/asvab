name: CI/CD

on:
  push:
    branches: ["dev"]
  pull_request:
    branches: ["dev"]

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    strategy:
      matrix:
        node-version: [22.x]

    steps:
      # ‚úÖ 1Ô∏è‚É£ Checkout source code
      - name: Checkout repository
        uses: actions/checkout@v4

      # ‚úÖ 2Ô∏è‚É£ Setup Node.js v√† cache dependencies
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"

      # ‚úÖ 3Ô∏è‚É£ C√†i ƒë·∫∑t dependencies
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # ‚úÖ 4Ô∏è‚É£ Ki·ªÉm tra v√† t·∫°o file `.env`
      - name: Check and create .env file
        run: |
          echo "üîç Checking environment variables..."
          [[ -z "${{ secrets.AUTH_SECRET }}" ]] && echo "‚ö†Ô∏è AUTH_SECRET is missing!" || echo "‚úÖ AUTH_SECRET exists!"
          [[ -z "${{ secrets.DEV_BASE_API }}" ]] && echo "‚ö†Ô∏è DEV_BASE_API is missing!" || echo "‚úÖ DEV_BASE_API exists!"
          [[ -z "${{ secrets.NEXT_PUBLIC_API_URL }}" ]] && echo "‚ö†Ô∏è NEXT_PUBLIC_API_URL is missing!" || echo "‚úÖ NEXT_PUBLIC_API_URL exists!"
          
          echo "üî® Creating .env file..."
          cat <<EOF > .env
          AUTH_SECRET=${{ secrets.AUTH_SECRET }}
          DEV_BASE_API=${{ secrets.DEV_BASE_API }}
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_APP_SHORT_NAME=${{ secrets.NEXT_PUBLIC_APP_SHORT_NAME }}
          NEXT_PUBLIC_GOOGLE_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_ID }}
          NEXT_PUBLIC_GOOGLE_SECRET=${{ secrets.NEXT_PUBLIC_GOOGLE_SECRET }}
          EOF

      # ‚úÖ 5Ô∏è‚É£ Ki·ªÉm tra l·∫°i n·ªôi dung `.env`
      - name: Debug .env file (only keys, no values)
        run: grep -o '^[^=]*' .env

      # ‚úÖ 6Ô∏è‚É£ Build d·ª± √°n
      - name: Build the project
        run: yarn build

      # ‚úÖ 7Ô∏è‚É£ Debug ki·ªÉm tra th∆∞ m·ª•c build
      - name: Debug .next directory
        run: ls -la .next || echo ".next does not exist"

      # ‚úÖ 8Ô∏è‚É£ ƒê·ªãnh nghƒ©a image name
      - name: Set Docker Image Name
        run: |
          echo "IMAGE_URL=ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.sha }}" >> $GITHUB_ENV
          echo "IMAGE_URL_LATEST=ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest" >> $GITHUB_ENV

      # ‚úÖ 9Ô∏è‚É£ Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ‚úÖ üîü ƒêƒÉng nh·∫≠p v√†o Docker Hub & GitHub Container Registry
      - name: Login to Docker Hub
        if: success()
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GitHub Container Registry (GHCR)
        if: success()
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}

      # ‚úÖ 1Ô∏è‚É£1Ô∏è‚É£ Build v√† push Docker image (s·ª≠ d·ª•ng multi-stage build ƒë·ªÉ t·ªëi ∆∞u dung l∆∞·ª£ng)
      - name: Build and push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_URL }},${{ env.IMAGE_URL_LATEST }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
              ENV_CONTENT=${{ secrets.ENV_CONTENT }}

      # ‚úÖ 1Ô∏è‚É£2Ô∏è‚É£ Ki·ªÉm tra `.env` trong container
      - name: Debug .env inside Docker
        run: docker run --rm ${{ env.IMAGE_URL }} cat /app/.env || echo ".env file not found in container!"

      # ‚úÖ 1Ô∏è‚É£3Ô∏è‚É£ Deploy l√™n CapRover
      - name: Deploy Image to CapRover
        uses: caprover/deploy-from-github@v1.1.2
        with:
          server: "${{ secrets.CAPROVER_SERVER }}"
          app: "${{ secrets.APP_NAME }}"
          token: "${{ secrets.CAPROVER_API_TOKEN }}"
          image: ${{ env.IMAGE_URL }}
